/*
 * ar0820_tables.h - sensor mode tables for ar0820 HDR sensor.
 *
 * Copyright (c) 2015-2019, NVIDIA CORPORATION, All Rights Reserved.
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms and conditions of the GNU General Public License,
 * version 2, as published by the Free Software Foundation.
 *
 * This program is distributed in the hope it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef __AR0820_I2C_TABLES__
#define __AR0820_I2C_TABLES__

#define AR0820_TABLE_WAIT_MS	0
#define AR0820_TABLE_END	1

#define ar0820_reg struct reg_16

static ar0820_reg ar0820_start_stream[] = {
#if 0
	{0x301A, 0x005C}, // RESET_REGISTER
#else
	{0x340a, 0x0077},
	{0x340c, 0x0080},
	{0x30ce, 0x0120},
	{0x301A, 0x011c},
#endif

	{AR0820_TABLE_END, 0x00}
};

static ar0820_reg ar0820_stop_stream[] = {
	{0x301A, 0x0058},

	{AR0820_TABLE_END, 0x00}
};

static ar0820_reg ar0820_mode_3840x2168_18fps[] = {
	{0x301A, 0x0058}, // RESET_REGISTER
	{0x2512, 0x8000}, // RESERVED_MFR2_2512
	{0x2510, 0xFFFF}, // RESERVED_MFR2_2510
	{0x2510, 0xFFFF}, // RESERVED_MFR2_2510
	{0x2510, 0xFFFF}, // RESERVED_MFR2_2510
	{0x2510, 0xFFFF}, // RESERVED_MFR2_2510
	{0x2510, 0xFFFF}, // RESERVED_MFR2_2510
	{0x2510, 0xFFFF}, // RESERVED_MFR2_2510
	{0x2510, 0xFFFF}, // RESERVED_MFR2_2510
	{0x2510, 0xFFFF}, // RESERVED_MFR2_2510
	{0x2510, 0xFF07}, // RESERVED_MFR2_2510
	{0x2510, 0xFFFF}, // RESERVED_MFR2_2510
	{0x2510, 0xFFFF}, // RESERVED_MFR2_2510
	{0x2510, 0xFFFF}, // RESERVED_MFR2_2510
	{0x2510, 0xFFFF}, // RESERVED_MFR2_2510
	{0x2510, 0xFFFF}, // RESERVED_MFR2_2510
	{0x2510, 0xFFFF}, // RESERVED_MFR2_2510
	{0x2510, 0xFFFF}, // RESERVED_MFR2_2510
	{0x2510, 0xFFFF}, // RESERVED_MFR2_2510
	{0x2510, 0xFFFF}, // RESERVED_MFR2_2510
	{0x2510, 0xFFFF}, // RESERVED_MFR2_2510
	{0x2510, 0xFFFF}, // RESERVED_MFR2_2510
	{0x2510, 0xFFFF}, // RESERVED_MFR2_2510
	{0x2510, 0xFFFF}, // RESERVED_MFR2_2510
	{0x2510, 0xFFFF}, // RESERVED_MFR2_2510
	{0x2510, 0xFFFF}, // RESERVED_MFR2_2510
	{0x2510, 0xFFFF}, // RESERVED_MFR2_2510
	{0x2510, 0xFFFF}, // RESERVED_MFR2_2510
	{0x2510, 0xFFFF}, // RESERVED_MFR2_2510
	{0x2510, 0xFFFF}, // RESERVED_MFR2_2510
	{0x2510, 0x3001}, // RESERVED_MFR2_2510
	{0x2510, 0x3010}, // RESERVED_MFR2_2510
	{0x2510, 0x3006}, // RESERVED_MFR2_2510
	{0x2510, 0x3020}, // RESERVED_MFR2_2510
	{0x2510, 0x3008}, // RESERVED_MFR2_2510
	{0x2510, 0xB031}, // RESERVED_MFR2_2510
	{0x2510, 0xA824}, // RESERVED_MFR2_2510
	{0x2510, 0x003C}, // RESERVED_MFR2_2510
	{0x2510, 0x001F}, // RESERVED_MFR2_2510
	{0x2510, 0xB0F9}, // RESERVED_MFR2_2510
	{0x2510, 0x006D}, // RESERVED_MFR2_2510
	{0x2510, 0x00EF}, // RESERVED_MFR2_2510
	{0x2510, 0x005C}, // RESERVED_MFR2_2510
	{0x2510, 0x106F}, // RESERVED_MFR2_2510
	{0x2510, 0xC013}, // RESERVED_MFR2_2510
	{0x2510, 0x016E}, // RESERVED_MFR2_2510
	{0x2510, 0xC806}, // RESERVED_MFR2_2510
	{0x2510, 0x106E}, // RESERVED_MFR2_2510
	{0x2510, 0x0017}, // RESERVED_MFR2_2510
	{0x2510, 0x0013}, // RESERVED_MFR2_2510
	{0x2510, 0x004B}, // RESERVED_MFR2_2510
	{0x2510, 0x0002}, // RESERVED_MFR2_2510
	{0x2510, 0x90F2}, // RESERVED_MFR2_2510
	{0x2510, 0x90FF}, // RESERVED_MFR2_2510
	{0x2510, 0xD034}, // RESERVED_MFR2_2510
	{0x2510, 0x1032}, // RESERVED_MFR2_2510
	{0x2510, 0x0000}, // RESERVED_MFR2_2510
	{0x2510, 0x0033}, // RESERVED_MFR2_2510
	{0x2510, 0x00D1}, // RESERVED_MFR2_2510
	{0x2510, 0x092E}, // RESERVED_MFR2_2510
	{0x2510, 0x1333}, // RESERVED_MFR2_2510
	{0x2510, 0x123D}, // RESERVED_MFR2_2510
	{0x2510, 0x045B}, // RESERVED_MFR2_2510
	{0x2510, 0x11BB}, // RESERVED_MFR2_2510
	{0x2510, 0x133A}, // RESERVED_MFR2_2510
	{0x2510, 0x907D}, // RESERVED_MFR2_2510
	{0x2510, 0x1017}, // RESERVED_MFR2_2510
	{0x2510, 0x1115}, // RESERVED_MFR2_2510
	{0x2510, 0x14DB}, // RESERVED_MFR2_2510
	{0x2510, 0x00DD}, // RESERVED_MFR2_2510
	{0x2510, 0x3088}, // RESERVED_MFR2_2510
	{0x2510, 0x3084}, // RESERVED_MFR2_2510
	{0x2510, 0x2007}, // RESERVED_MFR2_2510
	{0x2510, 0x02DA}, // RESERVED_MFR2_2510
	{0x2510, 0xD80C}, // RESERVED_MFR2_2510
	{0x2510, 0x2009}, // RESERVED_MFR2_2510
	{0x2510, 0x01F0}, // RESERVED_MFR2_2510
	{0x2510, 0x14F0}, // RESERVED_MFR2_2510
	{0x2510, 0x018B}, // RESERVED_MFR2_2510
	{0x2510, 0x128B}, // RESERVED_MFR2_2510
	{0x2510, 0x00E4}, // RESERVED_MFR2_2510
	{0x2510, 0x0072}, // RESERVED_MFR2_2510
	{0x2510, 0x203B}, // RESERVED_MFR2_2510
	{0x2510, 0x8A28}, // RESERVED_MFR2_2510
	{0x2510, 0x10CC}, // RESERVED_MFR2_2510
	{0x2510, 0xC02A}, // RESERVED_MFR2_2510
	{0x2510, 0x1064}, // RESERVED_MFR2_2510
	{0x2510, 0x0063}, // RESERVED_MFR2_2510
	{0x2510, 0x1072}, // RESERVED_MFR2_2510
	{0x2510, 0x06BE}, // RESERVED_MFR2_2510
	{0x2510, 0x006E}, // RESERVED_MFR2_2510
	{0x2510, 0x100E}, // RESERVED_MFR2_2510
	{0x2510, 0x0019}, // RESERVED_MFR2_2510
	{0x2510, 0x0015}, // RESERVED_MFR2_2510
	{0x2510, 0x16EE}, // RESERVED_MFR2_2510
	{0x2510, 0x0071}, // RESERVED_MFR2_2510
	{0x2510, 0x10BE}, // RESERVED_MFR2_2510
	{0x2510, 0x1063}, // RESERVED_MFR2_2510
	{0x2510, 0x1671}, // RESERVED_MFR2_2510
	{0x2510, 0x1095}, // RESERVED_MFR2_2510
	{0x2510, 0x1019}, // RESERVED_MFR2_2510
	{0x2510, 0x3088}, // RESERVED_MFR2_2510
	{0x2510, 0x3084}, // RESERVED_MFR2_2510
	{0x2510, 0x2003}, // RESERVED_MFR2_2510
	{0x2510, 0x018B}, // RESERVED_MFR2_2510
	{0x2510, 0x128B}, // RESERVED_MFR2_2510
	{0x2510, 0x00E4}, // RESERVED_MFR2_2510
	{0x2510, 0x0072}, // RESERVED_MFR2_2510
	{0x2510, 0x20C4}, // RESERVED_MFR2_2510
	{0x2510, 0x10E4}, // RESERVED_MFR2_2510
	{0x2510, 0x1072}, // RESERVED_MFR2_2510
	{0x2510, 0x3041}, // RESERVED_MFR2_2510
	{0x2510, 0xD800}, // RESERVED_MFR2_2510
	{0x2510, 0x000A}, // RESERVED_MFR2_2510
	{0x2510, 0x100C}, // RESERVED_MFR2_2510
	{0x2510, 0x008E}, // RESERVED_MFR2_2510
	{0x2510, 0x3081}, // RESERVED_MFR2_2510
	{0x2510, 0x10CB}, // RESERVED_MFR2_2510
	{0x2510, 0x10D2}, // RESERVED_MFR2_2510
	{0x2510, 0xC200}, // RESERVED_MFR2_2510
	{0x2510, 0xCA00}, // RESERVED_MFR2_2510
	{0x2510, 0xD230}, // RESERVED_MFR2_2510
	{0x2510, 0x8200}, // RESERVED_MFR2_2510
	{0x2510, 0x11AE}, // RESERVED_MFR2_2510
	{0x2510, 0x1039}, // RESERVED_MFR2_2510
	{0x2510, 0xD000}, // RESERVED_MFR2_2510
	{0x2510, 0x106D}, // RESERVED_MFR2_2510
	{0x2510, 0x101F}, // RESERVED_MFR2_2510
	{0x2510, 0x100E}, // RESERVED_MFR2_2510
	{0x2510, 0x100A}, // RESERVED_MFR2_2510
	{0x2510, 0x3042}, // RESERVED_MFR2_2510
	{0x2510, 0x3086}, // RESERVED_MFR2_2510
	{0x2510, 0x102F}, // RESERVED_MFR2_2510
	{0x2510, 0x3090}, // RESERVED_MFR2_2510
	{0x2510, 0x9010}, // RESERVED_MFR2_2510
	{0x2510, 0xB000}, // RESERVED_MFR2_2510
	{0x2510, 0x30A0}, // RESERVED_MFR2_2510
	{0x2510, 0x1016}, // RESERVED_MFR2_2510
	{0x2510, 0x7FFF}, // RESERVED_MFR2_2510
	{0x2510, 0x7FFF}, // RESERVED_MFR2_2510
	{0x2510, 0x7FFF}, // RESERVED_MFR2_2510
	{0x2510, 0x7FFF}, // RESERVED_MFR2_2510
	{0x2510, 0x7FFF}, // RESERVED_MFR2_2510
	{0x2510, 0x7FFF}, // RESERVED_MFR2_2510
	{0x2510, 0x7FFF}, // RESERVED_MFR2_2510
	{0x350A, 0xC1C1}, // RESERVED_MFR_350A
	{0x350C, 0xC1C1}, // RESERVED_MFR_350C
	{0x350E, 0x8D8D}, // RESERVED_MFR_350E
	{0x3510, 0x8D88}, // RESERVED_MFR_3510
	{0x3512, 0x8C8C}, // RESERVED_MFR_3512
	{0x3514, 0xA0A0}, // RESERVED_MFR_3514
	{0x351A, 0x8600}, // RESERVED_MFR_351A
	{0x3506, 0x004A}, // RESERVED_MFR_3506
	{0x3520, 0x1422}, // RESERVED_MFR_3520
	{0x3522, 0x3E37}, // RESERVED_MFR_3522
	{0x3524, 0x6E48}, // RESERVED_MFR_3524
	{0x3526, 0x4237}, // RESERVED_MFR_3526
	{0x3528, 0x6249}, // RESERVED_MFR_3528
	{0x30FE, 0x00A8}, // RESERVED_MFR_30FE
	{0x342A, 0x0011}, // RESERVED_MFR_342A
	{0x3584, 0x0000}, // ROW_AB_CTRL
	{0x354C, 0x0030}, // RESERVED_MFR_354C
	{0x3370, 0x0111}, // DBLC_CONTROL
	{0x337A, 0x0E74}, // RESERVED_MFR_337A
	{0x3110, 0x0011}, // HDR_CONTROL0
	{0x3100, 0x4000}, // RESERVED_MFR_3100
	{0x33FC, 0x00E4}, // COLOUR_ENABLE
	{0x33FE, 0x00E4}, // COLOUR_ENABLE_CB
	{0x301E, 0x00A8}, // DATA_PEDESTAL_
	{0x3180, 0x0021}, // RESERVED_MFR_3180
	{0x3372, 0x710F}, // DBLC_FS0_CONTROL
	{0x3E4C, 0x0404}, // RESERVED_MFR_3E4C
	{0x3180, 0x0021}, // RESERVED_MFR_3180
	{0x37A0, 0x0001}, // COARSE_INTEGRATION_AD_TIME
	{0x37A4, 0x0000}, // COARSE_INTEGRATION_AD_TIME2
	{0x37A8, 0x0000}, // COARSE_INTEGRATION_AD_TIME3
	{0x37AC, 0x0001}, // COARSE_INTEGRATION_AD_TIME4
	{0x302A, 0x0003}, // VT_PIX_CLK_DIV
	{0x302C, 0x0701}, // VT_SYS_CLK_DIV
	{0x302E, 0x0009}, // PRE_PLL_CLK_DIV
	{0x3030, 0x006A}, // PLL_MULTIPLIER, 19fps
	{0x3036, 0x0006}, // OP_WORD_CLK_DIV
	{0x3038, 0x0001}, // OP_SYS_CLK_DIV
	{0x303A, 0x0085}, // PLL_MULTIPLIER_ANA
	{0x303C, 0x0003}, // PRE_PLL_CLK_DIV_ANA
	{0x31B0, 0x0091}, // FRAME_PREAMBLE
	{0x31B2, 0x0060}, // LINE_PREAMBLE
	{0x31B4, 0x224B}, // RESERVED_MFR_31B4
	{0x31B6, 0x2391}, // RESERVED_MFR_31B6
	{0x31B8, 0xA04C}, // RESERVED_MFR_31B8
	{0x31BA, 0x0410}, // RESERVED_MFR_31BA
	{0x31BC, 0x930D}, // RESERVED_MFR_31BC
	{0x31BE, 0x5083}, // MIPI_CONFIG_STATUS
	{0x3002, 0x0000}, // Y_ADDR_START_
	{0x3004, 0x0008}, // X_ADDR_START_
	{0x3006, 0x0877}, // Y_ADDR_END_
	{0x3008, 0x0F07}, // X_ADDR_END_
	{0x32FC, 0x0000}, // READ_MODE2
	{0x37E0, 0x8421}, // ROW_TX_RO_ENABLE
	{0x37E2, 0x8421}, // ROW_TX_RO_ENABLE_CB
	{0x323C, 0x8421}, // ROW_TX_ENABLE
	{0x323E, 0x8421}, // ROW_TX_ENABLE_CB
	{0x3040, 0x0001}, // READ_MODE
	{0x301D, 0x0000}, // IMAGE_ORIENTATION_
	{0x3082, 0x0000}, // OPERATION_MODE_CTRL
	{0x30BA, 0x1100}, // DIGITAL_CTRL
	{0x3012, 0x0090}, // COARSE_INTEGRATION_TIME_
	{0x3014, 0x0000}, // FINE_INTEGRATION_TIME_
	{0x3362, 0x0000}, // DC_GAIN
	{0x3366, 0x0000}, // ANALOG_GAIN
	{0x336A, 0x4444}, // ANALOG_GAIN2
	{0x33BE, 0x00FF}, // ANALOG_LOW_GAIN
	{0x3056, 0x0080}, // GREEN1_GAIN
	{0x3058, 0x0086}, // BLUE_GAIN
	{0x305A, 0x0086}, // RED_GAIN
	{0x305C, 0x0080}, // GREEN2_GAIN
	/* {0x305E, 0x0080}, // GLOBAL_GAIN */
	{0x300A, 0x08B0}, // FRAME_LENGTH_LINES_
	{0x300C, 0x1400}, // LINE_LENGTH_PCK_
	{0x31AE, 0x0204}, // SERIAL_FORMAT
	{0x31AC, 0x0C0C}, // DATA_FORMAT_BITS
	{0x301A, 0x0058}, // RESET_REGISTER

	{0x3064, 0x0000}, // SMIA_TEST

	{AR0820_TABLE_END, 0x00}
};

enum {
	AR0820_MODE_3840x2168_18FPS,

	AR0820_START_STREAM,
	AR0820_STOP_STREAM,
};

static ar0820_reg *mode_table[] = {
	[AR0820_MODE_3840x2168_18FPS] = ar0820_mode_3840x2168_18fps,

	[AR0820_START_STREAM]  = ar0820_start_stream,
	[AR0820_STOP_STREAM]  = ar0820_stop_stream,
};

static const int ar0820_18fps[] = {
	18,
};

/*
 * WARNING: frmfmt ordering need to match mode definition in
 * device tree!
 */
static const struct camera_common_frmfmt ar0820_frmfmt[] = {
	{{3840, 2168},	ar0820_18fps, 1, 0, AR0820_MODE_3840x2168_18FPS},
	/* Add modes with no device tree support after below */
};

#endif /* __AR0820_I2C_TABLES__ */
